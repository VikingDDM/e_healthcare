@model E_health_care.Models.BookModel


@{
    Layout = "~//Views//Shared//_MemberLayout.cshtml";
}

<script type="text/javascript">
    $(document).ready(function () {
        //Dropdownlist Selectedchange event
        $("#CityID").change(function () {
            $("#AreaID").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetAreas")', // we are calling json method

                dataType: 'json',

                data: { id: $("#CityID").val() },

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $.each(states, function (i, state) {
                    $("#AreaID").append('<option value="' + state.Value + '">' +
                         state.Text + '</option>');
                    // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })


        //--doctor load
        $("#DoctorType").change(function () {
            $("#DoctorID").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDoctors")', // we are calling json method

                dataType: 'json',

                data: { id: $("#DoctorType").val() },

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $.each(states, function (i, state) {
                        $("#DoctorID").append('<option value="' + state.Value + '">' +
                             state.Text + '</option>');
                        // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })


        //---Clinic Load


        $("#DoctorID").change(function () {
            $("#ClinicID").empty();
            
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetClinics")', // we are calling json method

                dataType: 'json',

                data: { id: $("#DoctorID").val() },

                success: function (states) {
                    // states contains the JSON formatted list
                    // of states passed from the controller

                    $.each(states, function (i, state) {
                        $("#ClinicID").append('<option value="' + state.Value + '">' +
                             state.Text + '</option>');
                        // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })

        //-Time Load
        $("#ClinicID").change(function () {
            $("#SlotID").empty();

            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetTimeSlot")', // we are calling json method

                dataType: 'json',

                data: { id: $("#DoctorID").val() },

                success: function (states) {
                    // of states passed from the controller

                    // states contains the JSON formatted list
                    $.each(states, function (i, state) {
                       // alert(state);
                        $("#SlotID").append('<option value="' + state.Value + '">' +
                             state.Text + '</option>');
                        // here we are adding option for States

                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve states.' + ex);
                }
            });
            return false;
        })
    });
</script>

    @using (Html.BeginForm()) 
    {
        @Html.AntiForgeryToken()
        
        <div class="form-horizontal">
            <h4>BookModel</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
          
              <div class="form-group">
                @Html.LabelFor(model => model.CityID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("CityID", ViewData["citylist"] as List<SelectListItem>, new { @class = "form-control" })
                      
                   
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.AreaID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
               @Html.DropDownList("AreaID", new SelectList(string.Empty, "Value", "Text"), "Please select a Area", new { @class = "form-control" })

                     
                </div>
            </div>
    

            <div class="form-group">
                @Html.Label("Doctor Type", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("DoctorType", ViewData["doctortypelist"] as List<SelectListItem>, new { @class = "form-control" })


                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DoctorID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
              
                    @Html.DropDownList("DoctorID", new SelectList(string.Empty, "Value", "Text"), "Please select a Doctor", new { @class = "form-control" })


                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.ClinicID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ClinicID", new SelectList(string.Empty, "Value", "Text"), "Please select a Clinic", new { @class = "form-control" })


                </div>
            </div>
    
    
            <div class="form-group">
                @Html.LabelFor(model => model.SlotID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">


                         @Html.DropDownList("SlotID", new SelectList(string.Empty, "Value", "Text"), "Please select a Slot", new { @class = "form-control" })


                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.PatientName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PatientName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PatientName, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.PatientAge, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PatientAge, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PatientAge, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.PatientGender, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">

                    @Html.DropDownList("PatientGender", ViewData["gender"] as List<SelectListItem>, new { @class = "form-control" })

                    
                    
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.IsNewCase, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsNewCase)
                        @Html.ValidationMessageFor(model => model.IsNewCase, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
    
            <div class="form-group">
                @Html.LabelFor(model => model.OldCaseNo, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OldCaseNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OldCaseNo, "", new { @class = "text-danger" })
                </div>
            </div>
    
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    
    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>
